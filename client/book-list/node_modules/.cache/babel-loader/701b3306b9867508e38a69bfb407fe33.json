{"ast":null,"code":"var _jsxFileName = \"/Users/joeydaems/Documents/Coding Challenge/client/book-list/src/components/BookForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Button, Form, FormField, Input, Label } from \"semantic-ui-react\";\nimport Rating from \"@mui/material/Rating\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BookForm = () => {\n  _s();\n\n  const [name, setName] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [genre, setGenre] = useState(\"\");\n  const [rating, setRating] = useState(Number);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        name: name,\n        children: \"Book Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        placeholder: \"Book Name\",\n        value: name,\n        onChange: e => setName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n      children: [/*#__PURE__*/_jsxDEV(Label, {\n        name: author,\n        children: \"Author\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        placeholder: \"Author\",\n        value: author,\n        onChange: e => setAuthor(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        placeholder: \"Genre\",\n        value: genre,\n        onChange: e => setGenre(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n      children: /*#__PURE__*/_jsxDEV(Rating, {\n        name: \"simple-controlled\",\n        onChange: (_, data) => {\n          const numRating = data;\n          setRating(numRating);\n        },\n        value: rating\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormField, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: async () => {\n          const book = {\n            name,\n            author,\n            genre,\n            rating\n          };\n          const response = await fetch(\"/add_book\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(movie)\n          });\n\n          if (response.ok) {\n            console.log(\"response worked!\");\n            onNewMovie(movie);\n            setTitle(\"\");\n            setRating(1);\n          }\n        },\n        children: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BookForm, \"5RvAYxIcOhD00YIHD/7u2fTd2+E=\");\n\n_c = BookForm;\nexport default BookForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"BookForm\");","map":{"version":3,"sources":["/Users/joeydaems/Documents/Coding Challenge/client/book-list/src/components/BookForm.jsx"],"names":["React","useState","Button","Form","FormField","Input","Label","Rating","BookForm","name","setName","author","setAuthor","genre","setGenre","rating","setRating","Number","e","target","value","_","data","numRating","book","response","fetch","method","headers","body","JSON","stringify","movie","ok","console","log","onNewMovie","setTitle"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,SAAvB,EAAkCC,KAAlC,EAAyCC,KAAzC,QAAsD,mBAAtD;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACU,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACc,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAACgB,MAAD,CAApC;AAEA,sBACE,QAAC,IAAD;AAAA,4BACE,QAAC,IAAD,CAAM,KAAN;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAER,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,KAAD;AACE,QAAA,WAAW,EAAC,WADd;AAEE,QAAA,KAAK,EAAEA,IAFT;AAGE,QAAA,QAAQ,EAAGS,CAAD,IAAOR,OAAO,CAACQ,CAAC,CAACC,MAAF,CAASC,KAAV;AAH1B;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eASE,QAAC,IAAD,CAAM,KAAN;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAET,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,KAAD;AACE,QAAA,WAAW,EAAC,QADd;AAEE,QAAA,KAAK,EAAEA,MAFT;AAGE,QAAA,QAAQ,EAAGO,CAAD,IAAON,SAAS,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV;AAH5B;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YATF,eAiBE,QAAC,IAAD,CAAM,KAAN;AAAA,6BACE,QAAC,KAAD;AACE,QAAA,WAAW,EAAC,OADd;AAEE,QAAA,KAAK,EAAEP,KAFT;AAGE,QAAA,QAAQ,EAAGK,CAAD,IAAOJ,QAAQ,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV;AAH3B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAjBF,eAwBE,QAAC,IAAD,CAAM,KAAN;AAAA,6BACE,QAAC,MAAD;AACE,QAAA,IAAI,EAAC,mBADP;AAEE,QAAA,QAAQ,EAAE,CAACC,CAAD,EAAIC,IAAJ,KAAa;AACrB,gBAAMC,SAAS,GAAGD,IAAlB;AACAN,UAAAA,SAAS,CAACO,SAAD,CAAT;AACD,SALH;AAME,QAAA,KAAK,EAAER;AANT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAxBF,eAkCE,QAAC,SAAD;AAAA,6BACE,QAAC,MAAD;AACE,QAAA,OAAO,EAAE,YAAY;AACnB,gBAAMS,IAAI,GAAG;AAAEf,YAAAA,IAAF;AAAQE,YAAAA,MAAR;AAAgBE,YAAAA,KAAhB;AAAuBE,YAAAA;AAAvB,WAAb;AACA,gBAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAC,WAAD,EAAc;AACxCC,YAAAA,MAAM,EAAE,MADgC;AAExCC,YAAAA,OAAO,EAAE;AACP,8BAAgB;AADT,aAF+B;AAKxCC,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeC,KAAf;AALkC,WAAd,CAA5B;;AAQA,cAAIP,QAAQ,CAACQ,EAAb,EAAiB;AACfC,YAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAC,YAAAA,UAAU,CAACJ,KAAD,CAAV;AACAK,YAAAA,QAAQ,CAAC,EAAD,CAAR;AACArB,YAAAA,SAAS,CAAC,CAAD,CAAT;AACD;AACF,SAjBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAlCF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA4DD,CAlED;;GAAMR,Q;;KAAAA,Q;AAoEN,eAAeA,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { Button, Form, FormField, Input, Label } from \"semantic-ui-react\";\nimport Rating from \"@mui/material/Rating\";\n\nconst BookForm = () => {\n  const [name, setName] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [genre, setGenre] = useState(\"\");\n  const [rating, setRating] = useState(Number);\n\n  return (\n    <Form>\n      <Form.Field>\n        <Label name={name}>Book Name</Label>\n        <Input\n          placeholder=\"Book Name\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n        />\n      </Form.Field>\n      <Form.Field>\n        <Label name={author}>Author</Label>\n        <Input\n          placeholder=\"Author\"\n          value={author}\n          onChange={(e) => setAuthor(e.target.value)}\n        />\n      </Form.Field>\n      <Form.Field>\n        <Input\n          placeholder=\"Genre\"\n          value={genre}\n          onChange={(e) => setGenre(e.target.value)}\n        />\n      </Form.Field>\n      <Form.Field>\n        <Rating\n          name=\"simple-controlled\"\n          onChange={(_, data) => {\n            const numRating = data;\n            setRating(numRating);\n          }}\n          value={rating}\n        />\n      </Form.Field>\n      <FormField>\n        <Button\n          onClick={async () => {\n            const book = { name, author, genre, rating };\n            const response = await fetch(\"/add_book\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n              },\n              body: JSON.stringify(movie),\n            });\n\n            if (response.ok) {\n              console.log(\"response worked!\");\n              onNewMovie(movie);\n              setTitle(\"\");\n              setRating(1);\n            }\n          }}\n        >\n          submit\n        </Button>\n      </FormField>\n    </Form>\n  );\n};\n\nexport default BookForm;\n"]},"metadata":{},"sourceType":"module"}